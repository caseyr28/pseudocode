Questions

What is the main difference between a stack and a queue?

  A: Stacks and queues differ in their approach to manipulating data 
  within each; A stack uses the LIFO ("Last in first out") principle, 
  and queues use the FIFO ("First in first out") principle.

What are the similarities between stacks and queues?

  A: Stacks and queues are both used by programmers to 
  create an order of operations, support system function and rank tasks.


Imagine you are an engineer tasked with implementing the UNDO and REDO 
options in a word processor such as Microsoft Word. Which data structure 
would you use for each option and why?

  A: I would implement the task using a stack because both 
  UNDO and REDO follow the principle of LIFO.

Given a string, reverse it using a stack. For example, the string "Bloc!" should be converted to "!colB".

  A:
  //Answer using JavaScript

  var reverseWord = function(str){
    var splitStr = str.split("");
    var reverseArr = splitStr.reverse();
    var joinStr = reverseArr.join("");
    return joinStr;
  }

  reverseWord('Bloc');


Implement the pop method of a stack using one queue. Make a FIFO data structure mirror the functionality of a LIFO data structure. Since the internal list is not the same as defined in the checkpoint, it may help to rewrite the pseudocode first.

  A:
    //Pseudocode first
    FUNCTION POP(queue)
      SET itemRemoved
      SET newQueue
      PUSH item to queue
      FOR each item in queue
        IF item is last item in queue
          SET itemRemoved to queue item
        ELSE 
          enqueue item to newQueue  
      END FOR
      PRINT itemRemoved
    END FUNCTION

    //JavaScript
    var queue = [1, 2, 3, 4, 5]
    
    var queuePop = function(queue, item) {
      var newQueue = [];
      var itemRemoved = [];
      queue.push(item);
      for (var i = 0; i < queue.length; i++) {
        if (i === queue.length - 1) {
          itemRemoved = queue[i];
        } else {
          newQueue.push(queue[i]);
        }
      }
      return itemRemoved;

    }

    queuePop(queue, 6);


Implement the enqueue and dequeue methods defined in the checkpoint inside your own Queue class.

class Queue {
  constructor(){
    this.items = [];   

    //enqueue method
    function enqueue(item){
      this.items.push(item);
    }
    //dequeue method
    function dequeue(item) {
      if (this.items.length === 0) {
        return "Empty queue";
      } else {
        this.items.shift(item);
      }
    }
  }
}

let myQueue = new Queue();
