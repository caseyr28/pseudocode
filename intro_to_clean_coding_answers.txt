1.In your own words, explain what clean code is and why it is important.

ANSWER:////////////////////////////////////////
Clean code is code that is simple, ledgible and broken down into small digestible tasks. 
All of these attributes are important because any codebase needs to be maintainable. 
Maintainability includes being easily shared or being read by others, & easily tracking and resolving bugs.

2.Read this article about Toyota and their use of bad code. Although you may not yet understand all 
of the topics discussed, think about another commonly used object that relies on computers and explain 
what would happen if the code was not created to an acceptable standard.

ANSWER://////////////////////////////////////
Another commonly used object susceptable to bad code would be the aircraft. Specifically navigation and flight control software.
If that software was poor quality code, countless live would be at risk, as modern aircraft pilots rely so heavily on these seytems 
to safely fly every day.


3.Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.

FUNCTION do(x, y)               // Creating a new function
 IF y = "F" THEN               // Check if y is equal "F"
 SET z to (x−32) * (5/9)       // Formula to convert degrees fahrenheit to celsius
 PRINT z                       // Print result
 ELSE IF y = "C" THEN          // If y not equal to "F", check if equal to "C"
 SET z to x * 1.8000 + 32.00   // Formula to convert degrees celsius to fahrenheit
 PRINT z                       // Print result
 END IF
END FUNCTION

ANSWER://////////////////////////////////////////////
I think this code could be cleaner, by utilizing variables to store the formulas.

FUNCTION do(x, y)              
INPUT fahrenheit to (x−32) * (5/9)    //set formula one to variable
INPUT celcius to x * 1.8000 + 32.00   //set formula two to variable

 IF y = "F" THEN               
 SET z to fahrenheit           
 PRINT z                       
 ELSE IF y = "C" THEN          
 SET z to celcius 
 PRINT z                       
 END IF
END FUNCTION


4.Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.

FUNCTION calcPercent(sum, total)
 IF NOT(total = 0) THEN
     SET percentage to sum / total * 100
 ELSE
   PRINT "Sorry, cannot divide by 0"
 END IF

 PRINT percentage
END FUNCTION

ANSWER://////////////////////////////////////////////
I consider this to be clean code, because it is performing a single calculation based on a condition. 
I can't see how that could be refactred to be simpler.

5.Using pseudocode, refactor the code for the following examples using the principles 
you have learned in this checkpoint.

a. The following function prints the subtotal of a customer's transaction and receives payment accordingly.

FUNCTION checkOutCustomer(subTotal, discountRate, paymentType)
   PRINT "Your total due is: " + subTotal * discountRate + (subTotal * tax)

   IF paymentType = 'CASH' THEN
       CALL getPayment RETURNING amount
       PRINT "Change due: " + amount - subTotal * discountRate + (subTotal * tax)
   ELSE IF paymentType = 'CREDIT CARD' THEN
       CALL getPayment RETURNING amount
       PRINT "Your credit card has been charged: " + subTotal * discountRate + (subTotal * tax)
   END IF
END FUNCTION

ANSWER://////////////////////////////////////////////

INPUT total to subTotal * discountRate + (subTotal * tax)

FUNCTION checkOutCustomer(total)
  PRINT "Your total due is: " + total
  CALL getPaymentType
END FUNCTION

FUNCTION getPaymentType (amount, total)
  IF paymentType = 'CASH' THEN
       CALL getPayment RETURNING amount
       PRINT "Change due: " + amount - total
  ELSE IF paymentType = 'CREDIT CARD' THEN
       CALL getPayment RETURNING amount
       PRINT "Your credit card has been charged: " + total
  END IF
END FUNCTION



b. The following function checks out a book if there are no issues with the guest's account.

FUNCTION checkoutBook(book, guest)
 IF guest.accountActive THEN
     IF NOT(guest.hasOverdueBooks) THEN
         IF guest.outstandingFees = 0 THEN
           APPEND book to guest.books
           SET book.status to "Checked Out"
           PRINT "Your books have been issued."
         END IF
     END IF
 ELSE
     PRINT "Unable to check out book."
 END IF
END FUNCTION

ANSWER://////////////////////////////////////////////

FUNCTION checkoutBook(book)
  IF guest.qualified = TRUE
    APPEND book to guest.books
    SET book.status to "Checked Out"
    PRINT "Your books have been issued."
  ELSE
    PRINT "Unable to check out book."
  END IF
END FUNCTION    

FUNCTION checkGuest(guest)
  IF guest.accountActive AND NOT guest.hasOverdueBooks AND guest.outstandingFees = 0
    RETURN guest.qualified
  END IF
END FUNCTION

c. The following class is a code snippet that should support the 
transactions a customer can perform at an ATM.

CLASS BankAccount

 FUNCTION displayBalance
    PRINT balance
 END FUNCTION

 FUNCTION deposit(amount)
    SET balance to balance + amount
 END FUNCTION

 FUNCTION withdraw(amount)
     IF balance > amount THEN
       SET balance to balance - amount
     END
 END FUNCTION

 FUNCTION creditCardOffer
     IF NOT(customer.hasCreditCard) THEN
         CALL offerCreditCard
     END
 END FUNCTION

 FUNCTION checkStatus
     IF NOT(customer.hasCheckingAccount) THEN
         CALL offerCheckingAccount
     END
 END FUNCTION

 ....
 ....
 ....

END

ANSWER://////////////////////////////////////////////


6. Square Given an array of integers, find out whether the sum of the integers is a perfect square. 
If it is a perfect square, return the square root, otherwise return the sum.

ANSWER://////////////////////////////////////////////

var numbers = [10,1,4,6,1,1,2];

var getRoot = function(arr){

  var total = arr.reduce((accumulator, currentValue) => accumulator + currentValue);
  var squareRoot = Math.sqrt(total);
  
  if (total === squareRoot * squareRoot) {
    return "The square root is " + squareRoot;
  } else {
    return "The sum is " + total;
  }
}

getRoot(numbers);

7. Duplicate Given an array of integers, find out whether the array contains any duplicate elements. The function should return true if any value 
appears at least twice in the array, and false if every element is distinct.

ANSWER://////////////////////////////////////////////

var numbers = [10,1,4,6,2, 1];

var checkForDuplicates = function(arr) {
  var result = false;
  
  for (var i = 0; i < arr.length; i++) {
    for (var j = 1; j < arr.length; j++) {
      if (i !== j) {
        if (arr[i] === arr[j]) {
          result = true;
        }
      }
    }
  } 
  return result;
}

checkForDuplicates(numbers);