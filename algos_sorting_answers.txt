1. Write pseudocode for bubble sort.

  A:
    FUNCTION bubbleSort(collection)
      REPEAT
        SET swapped to FALSE

        FOR i = FIRST INDEX of collection to LAST INDEX of collection - 1
          IF collection[i] > collection[i + 1] THEN
            SET temp to collection[i]
            SET collection[i] to collection[i + 1]
            SET collection[i + 1] to temp
            SET swapped to TRUE
          END IF  
        END FOR
      UNTIL swapped is FALSE

      RETURN collection
    END FUNCTION    

2. Write pseudocode for quicksort.

    A:
      FUNCTION quickSort(collection)
          IF collection length <= 1 THEN
            RETURN
          END IF
          SET pivot to collection[0]
          SET lesser to EMPTY ARRAY
          SET greater to EMPTY ARRAY
          FOR i = FIRST INDEX + 1 of collection to LAST INDEX of collection - 1
            IF i < pivot THEN
              PUSH i to lesser
            ELSE
              PUSH i to greater
          END FOR
          RETURN quickSort(lesser) PLUS (pivot, quickSort(greater))


3. We talked about time complexity in a previous checkpoint, and how to get an idea of the 
efficiency of an algorithm. After looking at the pseudocode for the above sorting methods, 
identify why merge sort and quick sort are much more efficient than the others. Walking 
through each algorithm with a few sample collections may help.

  A: Merge sort and Quick Sort have much more effiecent runtimes due to their structures in relation to n.
  Usually both offer a O(n log n) at runtime, versus other sorting algorithms. Both approach sorting witha "divide
  and conquer" approach. 

  Example of a Merge sort on the array '[9, 2, 5, 6, 4, 3, 7, 10, 1, 8]':
    First Pass
      array is divided into 2 sub-arrays, '[9, 2, 5, 6, 4], [3, 7, 10, 1, 8]'
    Second Pass
      arrays are divided again, '[9, 2, 5], [6, 4], [3, 7, 10], [1, 8]'
    Third Pass
      arrays divided again, '[9, 2], [5], [6], [4], [3, 7], [10], [1], [8]'
    Fourth Pass
      arrays are all single items, '[9], [2], [5], [6], [4], [3], [7], [10], [1], [8]'
    Merge pass one
      arrays are now compared, and placed in order based on their value to create runs,
        9, 2, 9 is larger than 2 so 2, 9
          5, 6, 6 is larger than 5 so 5, 6
            4, 3, 4 is larger than 3 so 3, 4,
              7, 10, 10 is larger than 7 so 7, 10
                1, 8, 8 is larger than 1 so 1, 8
    Merge pass two
      runs are now compared and placed in order to each other,
        2, 9 are merged with 5, 6 to be 2 5 6 9     
          3, 4 are merged with 7, 10 to be 3 4 7 10
    Merge pass three
      runs are continued to be compared and placed together until there's nothing left to comapre,
        2 5 6 9 are merged with 3 4 7 10 to be 2 3 4 5 6 7 9 10
          2 3 4 5 6 7 9 10 is merged with 1, 8 to be 1 2 3 4 5 6 7 8 9 10

  Example of the Quick sort on array '[9, 2, 5, 6, 4, 3, 7, 10, 1, 8]':
    A pivot point is declared, in this case the last item, 8
      First Pass  
        items are compared to the pivot and placed to the right of the pivot if larger,
          8 9 10 and 2 5 6 4 3 7 1 are now two arrays.
      Second Pass
        a pivot point is selected for each sub array, in this case 10 and 1 respectively, and the previous step runs,
          8 9 10 and 1 2 3 4 5 6 7 
      Merge pass one
        The two sub arrays are combined into a single array, with items in order by value,
          1 2 3 4 5 6 7 8 9 10

4. All of the sorts addressed in this checkpoint are known as comparison sorts. Research 
bucket sort and explain how it works. What is the ideal input for bucket sort?
  
  A: A bucket sort is a sorting method that when used properly takes O(n + k) time. It works by taking an unsorted
  list and placing items based on their properties into "buckets", which are then compared using an additional algorithm, such 
  as an insertsion sort, or recursively calling the bucket sort. Once all items are sorted the array is 
  put back together in order. An ideal input for a bucket sort are lists that are fairly evenly distributed, 
  and can have their properties measured using their index.